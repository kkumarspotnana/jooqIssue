/*
 * This file is generated by jOOQ.
 */
package com.jooq.coversionIssue.jooq.codegen;


import com.jooq.coversionIssue.jooq.codegen.tables.RegexpMatches;
import com.jooq.coversionIssue.jooq.codegen.tables.RegexpSplitToTable;
import com.jooq.coversionIssue.jooq.codegen.tables.Testtable;
import com.jooq.coversionIssue.jooq.codegen.tables.records.RegexpMatchesRecord;
import com.jooq.coversionIssue.jooq.codegen.tables.records.RegexpSplitToTableRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Public extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public</code>
     */
    public static final Public PUBLIC = new Public();

    /**
     * The table <code>public.regexp_matches</code>.
     */
    public final RegexpMatches REGEXP_MATCHES = RegexpMatches.REGEXP_MATCHES;

    /**
     * Call <code>public.regexp_matches</code>.
     */
    public static Result<RegexpMatchesRecord> REGEXP_MATCHES(
          Configuration configuration
        , String __1
        , String __2
    ) {
        return configuration.dsl().selectFrom(com.jooq.coversionIssue.jooq.codegen.tables.RegexpMatches.REGEXP_MATCHES.call(
              __1
            , __2
        )).fetch();
    }

    /**
     * Get <code>public.regexp_matches</code> as a table.
     */
    public static RegexpMatches REGEXP_MATCHES(
          String __1
        , String __2
    ) {
        return com.jooq.coversionIssue.jooq.codegen.tables.RegexpMatches.REGEXP_MATCHES.call(
            __1,
            __2
        );
    }

    /**
     * Get <code>public.regexp_matches</code> as a table.
     */
    public static RegexpMatches REGEXP_MATCHES(
          Field<String> __1
        , Field<String> __2
    ) {
        return com.jooq.coversionIssue.jooq.codegen.tables.RegexpMatches.REGEXP_MATCHES.call(
            __1,
            __2
        );
    }

    /**
     * The table <code>public.regexp_split_to_table</code>.
     */
    public final RegexpSplitToTable REGEXP_SPLIT_TO_TABLE = RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE;

    /**
     * Call <code>public.regexp_split_to_table</code>.
     */
    public static Result<RegexpSplitToTableRecord> REGEXP_SPLIT_TO_TABLE(
          Configuration configuration
        , String __1
        , String __2
    ) {
        return configuration.dsl().selectFrom(com.jooq.coversionIssue.jooq.codegen.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
              __1
            , __2
        )).fetch();
    }

    /**
     * Get <code>public.regexp_split_to_table</code> as a table.
     */
    public static RegexpSplitToTable REGEXP_SPLIT_TO_TABLE(
          String __1
        , String __2
    ) {
        return com.jooq.coversionIssue.jooq.codegen.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
            __1,
            __2
        );
    }

    /**
     * Get <code>public.regexp_split_to_table</code> as a table.
     */
    public static RegexpSplitToTable REGEXP_SPLIT_TO_TABLE(
          Field<String> __1
        , Field<String> __2
    ) {
        return com.jooq.coversionIssue.jooq.codegen.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
            __1,
            __2
        );
    }

    /**
     * The table <code>public.testtable</code>.
     */
    public final Testtable TESTTABLE = Testtable.TESTTABLE;

    /**
     * No further instances allowed
     */
    private Public() {
        super("public", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            RegexpMatches.REGEXP_MATCHES,
            RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE,
            Testtable.TESTTABLE
        );
    }
}
