/*
 * This file is generated by jOOQ.
 */
package com.jooq.coversionIssue.jooq.codegen;


import com.jooq.coversionIssue.jooq.codegen.routines.Citext1;
import com.jooq.coversionIssue.jooq.codegen.routines.Citext2;
import com.jooq.coversionIssue.jooq.codegen.routines.Citext3;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextCmp;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextEq;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextGe;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextGt;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextHash;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextHashExtended;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextLarger;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextLe;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextLt;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextNe;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextPatternCmp;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextPatternGe;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextPatternGt;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextPatternLe;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextPatternLt;
import com.jooq.coversionIssue.jooq.codegen.routines.CitextSmaller;
import com.jooq.coversionIssue.jooq.codegen.routines.Citextin;
import com.jooq.coversionIssue.jooq.codegen.routines.Citextout;
import com.jooq.coversionIssue.jooq.codegen.routines.Citextrecv;
import com.jooq.coversionIssue.jooq.codegen.routines.Citextsend;
import com.jooq.coversionIssue.jooq.codegen.routines.Max;
import com.jooq.coversionIssue.jooq.codegen.routines.Min;
import com.jooq.coversionIssue.jooq.codegen.routines.RegexpMatch1;
import com.jooq.coversionIssue.jooq.codegen.routines.RegexpMatch2;
import com.jooq.coversionIssue.jooq.codegen.routines.RegexpReplace1;
import com.jooq.coversionIssue.jooq.codegen.routines.RegexpReplace2;
import com.jooq.coversionIssue.jooq.codegen.routines.RegexpSplitToArray1;
import com.jooq.coversionIssue.jooq.codegen.routines.RegexpSplitToArray2;
import com.jooq.coversionIssue.jooq.codegen.routines.Replace;
import com.jooq.coversionIssue.jooq.codegen.routines.SplitPart;
import com.jooq.coversionIssue.jooq.codegen.routines.Strpos;
import com.jooq.coversionIssue.jooq.codegen.routines.Texticlike1;
import com.jooq.coversionIssue.jooq.codegen.routines.Texticlike2;
import com.jooq.coversionIssue.jooq.codegen.routines.Texticnlike1;
import com.jooq.coversionIssue.jooq.codegen.routines.Texticnlike2;
import com.jooq.coversionIssue.jooq.codegen.routines.Texticregexeq1;
import com.jooq.coversionIssue.jooq.codegen.routines.Texticregexeq2;
import com.jooq.coversionIssue.jooq.codegen.routines.Texticregexne1;
import com.jooq.coversionIssue.jooq.codegen.routines.Texticregexne2;
import com.jooq.coversionIssue.jooq.codegen.routines.Translate;
import com.jooq.coversionIssue.jooq.codegen.tables.RegexpMatches;
import com.jooq.coversionIssue.jooq.codegen.tables.RegexpSplitToTable;
import com.jooq.coversionIssue.jooq.codegen.tables.records.RegexpMatchesRecord;
import com.jooq.coversionIssue.jooq.codegen.tables.records.RegexpSplitToTableRecord;

import org.jooq.AggregateFunction;
import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;
import org.jooq.postgres.extensions.types.Inet;


/**
 * Convenience access to all stored procedures and functions in public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Routines {

    /**
     * Call <code>public.citext</code>
     */
    public static String citext1(
          Configuration configuration
        , String __1
    ) {
        Citext1 f = new Citext1();
        f.set__1(__1);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext</code> as a field.
     */
    public static Field<String> citext1(
          String __1
    ) {
        Citext1 f = new Citext1();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Get <code>public.citext</code> as a field.
     */
    public static Field<String> citext1(
          Field<String> __1
    ) {
        Citext1 f = new Citext1();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Call <code>public.citext</code>
     */
    public static String citext2(
          Configuration configuration
        , Boolean __1
    ) {
        Citext2 f = new Citext2();
        f.set__1(__1);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext</code> as a field.
     */
    public static Field<String> citext2(
          Boolean __1
    ) {
        Citext2 f = new Citext2();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Get <code>public.citext</code> as a field.
     */
    public static Field<String> citext2(
          Field<Boolean> __1
    ) {
        Citext2 f = new Citext2();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Call <code>public.citext</code>
     */
    public static String citext3(
          Configuration configuration
        , Inet __1
    ) {
        Citext3 f = new Citext3();
        f.set__1(__1);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext</code> as a field.
     */
    public static Field<String> citext3(
          Inet __1
    ) {
        Citext3 f = new Citext3();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Get <code>public.citext</code> as a field.
     */
    public static Field<String> citext3(
          Field<Inet> __1
    ) {
        Citext3 f = new Citext3();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Call <code>public.citext_cmp</code>
     */
    public static Integer citextCmp(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextCmp f = new CitextCmp();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_cmp</code> as a field.
     */
    public static Field<Integer> citextCmp(
          String __1
        , String __2
    ) {
        CitextCmp f = new CitextCmp();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_cmp</code> as a field.
     */
    public static Field<Integer> citextCmp(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextCmp f = new CitextCmp();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_eq</code>
     */
    public static Boolean citextEq(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextEq f = new CitextEq();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_eq</code> as a field.
     */
    public static Field<Boolean> citextEq(
          String __1
        , String __2
    ) {
        CitextEq f = new CitextEq();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_eq</code> as a field.
     */
    public static Field<Boolean> citextEq(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextEq f = new CitextEq();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_ge</code>
     */
    public static Boolean citextGe(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextGe f = new CitextGe();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_ge</code> as a field.
     */
    public static Field<Boolean> citextGe(
          String __1
        , String __2
    ) {
        CitextGe f = new CitextGe();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_ge</code> as a field.
     */
    public static Field<Boolean> citextGe(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextGe f = new CitextGe();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_gt</code>
     */
    public static Boolean citextGt(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextGt f = new CitextGt();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_gt</code> as a field.
     */
    public static Field<Boolean> citextGt(
          String __1
        , String __2
    ) {
        CitextGt f = new CitextGt();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_gt</code> as a field.
     */
    public static Field<Boolean> citextGt(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextGt f = new CitextGt();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_hash</code>
     */
    public static Integer citextHash(
          Configuration configuration
        , String __1
    ) {
        CitextHash f = new CitextHash();
        f.set__1(__1);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_hash</code> as a field.
     */
    public static Field<Integer> citextHash(
          String __1
    ) {
        CitextHash f = new CitextHash();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Get <code>public.citext_hash</code> as a field.
     */
    public static Field<Integer> citextHash(
          Field<String> __1
    ) {
        CitextHash f = new CitextHash();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Call <code>public.citext_hash_extended</code>
     */
    public static Long citextHashExtended(
          Configuration configuration
        , String __1
        , Long __2
    ) {
        CitextHashExtended f = new CitextHashExtended();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_hash_extended</code> as a field.
     */
    public static Field<Long> citextHashExtended(
          String __1
        , Long __2
    ) {
        CitextHashExtended f = new CitextHashExtended();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_hash_extended</code> as a field.
     */
    public static Field<Long> citextHashExtended(
          Field<String> __1
        , Field<Long> __2
    ) {
        CitextHashExtended f = new CitextHashExtended();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_larger</code>
     */
    public static String citextLarger(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextLarger f = new CitextLarger();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_larger</code> as a field.
     */
    public static Field<String> citextLarger(
          String __1
        , String __2
    ) {
        CitextLarger f = new CitextLarger();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_larger</code> as a field.
     */
    public static Field<String> citextLarger(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextLarger f = new CitextLarger();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_le</code>
     */
    public static Boolean citextLe(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextLe f = new CitextLe();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_le</code> as a field.
     */
    public static Field<Boolean> citextLe(
          String __1
        , String __2
    ) {
        CitextLe f = new CitextLe();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_le</code> as a field.
     */
    public static Field<Boolean> citextLe(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextLe f = new CitextLe();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_lt</code>
     */
    public static Boolean citextLt(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextLt f = new CitextLt();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_lt</code> as a field.
     */
    public static Field<Boolean> citextLt(
          String __1
        , String __2
    ) {
        CitextLt f = new CitextLt();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_lt</code> as a field.
     */
    public static Field<Boolean> citextLt(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextLt f = new CitextLt();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_ne</code>
     */
    public static Boolean citextNe(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextNe f = new CitextNe();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_ne</code> as a field.
     */
    public static Field<Boolean> citextNe(
          String __1
        , String __2
    ) {
        CitextNe f = new CitextNe();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_ne</code> as a field.
     */
    public static Field<Boolean> citextNe(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextNe f = new CitextNe();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_pattern_cmp</code>
     */
    public static Integer citextPatternCmp(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextPatternCmp f = new CitextPatternCmp();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_pattern_cmp</code> as a field.
     */
    public static Field<Integer> citextPatternCmp(
          String __1
        , String __2
    ) {
        CitextPatternCmp f = new CitextPatternCmp();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_pattern_cmp</code> as a field.
     */
    public static Field<Integer> citextPatternCmp(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextPatternCmp f = new CitextPatternCmp();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_pattern_ge</code>
     */
    public static Boolean citextPatternGe(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextPatternGe f = new CitextPatternGe();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_pattern_ge</code> as a field.
     */
    public static Field<Boolean> citextPatternGe(
          String __1
        , String __2
    ) {
        CitextPatternGe f = new CitextPatternGe();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_pattern_ge</code> as a field.
     */
    public static Field<Boolean> citextPatternGe(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextPatternGe f = new CitextPatternGe();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_pattern_gt</code>
     */
    public static Boolean citextPatternGt(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextPatternGt f = new CitextPatternGt();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_pattern_gt</code> as a field.
     */
    public static Field<Boolean> citextPatternGt(
          String __1
        , String __2
    ) {
        CitextPatternGt f = new CitextPatternGt();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_pattern_gt</code> as a field.
     */
    public static Field<Boolean> citextPatternGt(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextPatternGt f = new CitextPatternGt();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_pattern_le</code>
     */
    public static Boolean citextPatternLe(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextPatternLe f = new CitextPatternLe();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_pattern_le</code> as a field.
     */
    public static Field<Boolean> citextPatternLe(
          String __1
        , String __2
    ) {
        CitextPatternLe f = new CitextPatternLe();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_pattern_le</code> as a field.
     */
    public static Field<Boolean> citextPatternLe(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextPatternLe f = new CitextPatternLe();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_pattern_lt</code>
     */
    public static Boolean citextPatternLt(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextPatternLt f = new CitextPatternLt();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_pattern_lt</code> as a field.
     */
    public static Field<Boolean> citextPatternLt(
          String __1
        , String __2
    ) {
        CitextPatternLt f = new CitextPatternLt();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_pattern_lt</code> as a field.
     */
    public static Field<Boolean> citextPatternLt(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextPatternLt f = new CitextPatternLt();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.citext_smaller</code>
     */
    public static String citextSmaller(
          Configuration configuration
        , String __1
        , String __2
    ) {
        CitextSmaller f = new CitextSmaller();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citext_smaller</code> as a field.
     */
    public static Field<String> citextSmaller(
          String __1
        , String __2
    ) {
        CitextSmaller f = new CitextSmaller();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.citext_smaller</code> as a field.
     */
    public static Field<String> citextSmaller(
          Field<String> __1
        , Field<String> __2
    ) {
        CitextSmaller f = new CitextSmaller();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static String citextin(
          Configuration configuration
        , Object __1
    ) {
        Citextin f = new Citextin();
        f.set__1(__1);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Field<String> citextin(
          Object __1
    ) {
        Citextin f = new Citextin();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Field<String> citextin(
          Field<Object> __1
    ) {
        Citextin f = new Citextin();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public static Object citextout(
          Configuration configuration
        , String __1
    ) {
        Citextout f = new Citextout();
        f.set__1(__1);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public static Field<Object> citextout(
          String __1
    ) {
        Citextout f = new Citextout();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public static Field<Object> citextout(
          Field<String> __1
    ) {
        Citextout f = new Citextout();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static String citextrecv(
          Configuration configuration
        , Object __1
    ) {
        Citextrecv f = new Citextrecv();
        f.set__1(__1);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Field<String> citextrecv(
          Object __1
    ) {
        Citextrecv f = new Citextrecv();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Field<String> citextrecv(
          Field<Object> __1
    ) {
        Citextrecv f = new Citextrecv();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Call <code>public.citextsend</code>
     */
    public static byte[] citextsend(
          Configuration configuration
        , String __1
    ) {
        Citextsend f = new Citextsend();
        f.set__1(__1);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.citextsend</code> as a field.
     */
    public static Field<byte[]> citextsend(
          String __1
    ) {
        Citextsend f = new Citextsend();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Get <code>public.citextsend</code> as a field.
     */
    public static Field<byte[]> citextsend(
          Field<String> __1
    ) {
        Citextsend f = new Citextsend();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Get <code>public.max</code> as a field.
     */
    public static AggregateFunction<String> max(
          String __1
    ) {
        Max f = new Max();
        f.set__1(__1);

        return f.asAggregateFunction();
    }

    /**
     * Get <code>public.max</code> as a field.
     */
    public static AggregateFunction<String> max(
          Field<String> __1
    ) {
        Max f = new Max();
        f.set__1(__1);

        return f.asAggregateFunction();
    }

    /**
     * Get <code>public.min</code> as a field.
     */
    public static AggregateFunction<String> min(
          String __1
    ) {
        Min f = new Min();
        f.set__1(__1);

        return f.asAggregateFunction();
    }

    /**
     * Get <code>public.min</code> as a field.
     */
    public static AggregateFunction<String> min(
          Field<String> __1
    ) {
        Min f = new Min();
        f.set__1(__1);

        return f.asAggregateFunction();
    }

    /**
     * Call <code>public.regexp_match</code>
     */
    public static String[] regexpMatch1(
          Configuration configuration
        , String __1
        , String __2
    ) {
        RegexpMatch1 f = new RegexpMatch1();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.regexp_match</code> as a field.
     */
    public static Field<String[]> regexpMatch1(
          String __1
        , String __2
    ) {
        RegexpMatch1 f = new RegexpMatch1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.regexp_match</code> as a field.
     */
    public static Field<String[]> regexpMatch1(
          Field<String> __1
        , Field<String> __2
    ) {
        RegexpMatch1 f = new RegexpMatch1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.regexp_match</code>
     */
    public static String[] regexpMatch2(
          Configuration configuration
        , String __1
        , String __2
        , String __3
    ) {
        RegexpMatch2 f = new RegexpMatch2();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.regexp_match</code> as a field.
     */
    public static Field<String[]> regexpMatch2(
          String __1
        , String __2
        , String __3
    ) {
        RegexpMatch2 f = new RegexpMatch2();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Get <code>public.regexp_match</code> as a field.
     */
    public static Field<String[]> regexpMatch2(
          Field<String> __1
        , Field<String> __2
        , Field<String> __3
    ) {
        RegexpMatch2 f = new RegexpMatch2();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Call <code>public.regexp_replace</code>
     */
    public static String regexpReplace1(
          Configuration configuration
        , String __1
        , String __2
        , String __3
    ) {
        RegexpReplace1 f = new RegexpReplace1();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.regexp_replace</code> as a field.
     */
    public static Field<String> regexpReplace1(
          String __1
        , String __2
        , String __3
    ) {
        RegexpReplace1 f = new RegexpReplace1();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Get <code>public.regexp_replace</code> as a field.
     */
    public static Field<String> regexpReplace1(
          Field<String> __1
        , Field<String> __2
        , Field<String> __3
    ) {
        RegexpReplace1 f = new RegexpReplace1();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Call <code>public.regexp_replace</code>
     */
    public static String regexpReplace2(
          Configuration configuration
        , String __1
        , String __2
        , String __3
        , String __4
    ) {
        RegexpReplace2 f = new RegexpReplace2();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);
        f.set__4(__4);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.regexp_replace</code> as a field.
     */
    public static Field<String> regexpReplace2(
          String __1
        , String __2
        , String __3
        , String __4
    ) {
        RegexpReplace2 f = new RegexpReplace2();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);
        f.set__4(__4);

        return f.asField();
    }

    /**
     * Get <code>public.regexp_replace</code> as a field.
     */
    public static Field<String> regexpReplace2(
          Field<String> __1
        , Field<String> __2
        , Field<String> __3
        , Field<String> __4
    ) {
        RegexpReplace2 f = new RegexpReplace2();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);
        f.set__4(__4);

        return f.asField();
    }

    /**
     * Call <code>public.regexp_split_to_array</code>
     */
    public static String[] regexpSplitToArray1(
          Configuration configuration
        , String __1
        , String __2
    ) {
        RegexpSplitToArray1 f = new RegexpSplitToArray1();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.regexp_split_to_array</code> as a field.
     */
    public static Field<String[]> regexpSplitToArray1(
          String __1
        , String __2
    ) {
        RegexpSplitToArray1 f = new RegexpSplitToArray1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.regexp_split_to_array</code> as a field.
     */
    public static Field<String[]> regexpSplitToArray1(
          Field<String> __1
        , Field<String> __2
    ) {
        RegexpSplitToArray1 f = new RegexpSplitToArray1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.regexp_split_to_array</code>
     */
    public static String[] regexpSplitToArray2(
          Configuration configuration
        , String __1
        , String __2
        , String __3
    ) {
        RegexpSplitToArray2 f = new RegexpSplitToArray2();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.regexp_split_to_array</code> as a field.
     */
    public static Field<String[]> regexpSplitToArray2(
          String __1
        , String __2
        , String __3
    ) {
        RegexpSplitToArray2 f = new RegexpSplitToArray2();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Get <code>public.regexp_split_to_array</code> as a field.
     */
    public static Field<String[]> regexpSplitToArray2(
          Field<String> __1
        , Field<String> __2
        , Field<String> __3
    ) {
        RegexpSplitToArray2 f = new RegexpSplitToArray2();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Call <code>public.replace</code>
     */
    public static String replace(
          Configuration configuration
        , String __1
        , String __2
        , String __3
    ) {
        Replace f = new Replace();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.replace</code> as a field.
     */
    public static Field<String> replace(
          String __1
        , String __2
        , String __3
    ) {
        Replace f = new Replace();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Get <code>public.replace</code> as a field.
     */
    public static Field<String> replace(
          Field<String> __1
        , Field<String> __2
        , Field<String> __3
    ) {
        Replace f = new Replace();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Call <code>public.split_part</code>
     */
    public static String splitPart(
          Configuration configuration
        , String __1
        , String __2
        , Integer __3
    ) {
        SplitPart f = new SplitPart();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.split_part</code> as a field.
     */
    public static Field<String> splitPart(
          String __1
        , String __2
        , Integer __3
    ) {
        SplitPart f = new SplitPart();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Get <code>public.split_part</code> as a field.
     */
    public static Field<String> splitPart(
          Field<String> __1
        , Field<String> __2
        , Field<Integer> __3
    ) {
        SplitPart f = new SplitPart();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Call <code>public.strpos</code>
     */
    public static Integer strpos(
          Configuration configuration
        , String __1
        , String __2
    ) {
        Strpos f = new Strpos();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.strpos</code> as a field.
     */
    public static Field<Integer> strpos(
          String __1
        , String __2
    ) {
        Strpos f = new Strpos();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.strpos</code> as a field.
     */
    public static Field<Integer> strpos(
          Field<String> __1
        , Field<String> __2
    ) {
        Strpos f = new Strpos();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.texticlike</code>
     */
    public static Boolean texticlike1(
          Configuration configuration
        , String __1
        , String __2
    ) {
        Texticlike1 f = new Texticlike1();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.texticlike</code> as a field.
     */
    public static Field<Boolean> texticlike1(
          String __1
        , String __2
    ) {
        Texticlike1 f = new Texticlike1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.texticlike</code> as a field.
     */
    public static Field<Boolean> texticlike1(
          Field<String> __1
        , Field<String> __2
    ) {
        Texticlike1 f = new Texticlike1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.texticlike</code>
     */
    public static Boolean texticlike2(
          Configuration configuration
        , String __1
        , String __2
    ) {
        Texticlike2 f = new Texticlike2();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.texticlike</code> as a field.
     */
    public static Field<Boolean> texticlike2(
          String __1
        , String __2
    ) {
        Texticlike2 f = new Texticlike2();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.texticlike</code> as a field.
     */
    public static Field<Boolean> texticlike2(
          Field<String> __1
        , Field<String> __2
    ) {
        Texticlike2 f = new Texticlike2();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.texticnlike</code>
     */
    public static Boolean texticnlike1(
          Configuration configuration
        , String __1
        , String __2
    ) {
        Texticnlike1 f = new Texticnlike1();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.texticnlike</code> as a field.
     */
    public static Field<Boolean> texticnlike1(
          String __1
        , String __2
    ) {
        Texticnlike1 f = new Texticnlike1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.texticnlike</code> as a field.
     */
    public static Field<Boolean> texticnlike1(
          Field<String> __1
        , Field<String> __2
    ) {
        Texticnlike1 f = new Texticnlike1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.texticnlike</code>
     */
    public static Boolean texticnlike2(
          Configuration configuration
        , String __1
        , String __2
    ) {
        Texticnlike2 f = new Texticnlike2();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.texticnlike</code> as a field.
     */
    public static Field<Boolean> texticnlike2(
          String __1
        , String __2
    ) {
        Texticnlike2 f = new Texticnlike2();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.texticnlike</code> as a field.
     */
    public static Field<Boolean> texticnlike2(
          Field<String> __1
        , Field<String> __2
    ) {
        Texticnlike2 f = new Texticnlike2();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.texticregexeq</code>
     */
    public static Boolean texticregexeq1(
          Configuration configuration
        , String __1
        , String __2
    ) {
        Texticregexeq1 f = new Texticregexeq1();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.texticregexeq</code> as a field.
     */
    public static Field<Boolean> texticregexeq1(
          String __1
        , String __2
    ) {
        Texticregexeq1 f = new Texticregexeq1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.texticregexeq</code> as a field.
     */
    public static Field<Boolean> texticregexeq1(
          Field<String> __1
        , Field<String> __2
    ) {
        Texticregexeq1 f = new Texticregexeq1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.texticregexeq</code>
     */
    public static Boolean texticregexeq2(
          Configuration configuration
        , String __1
        , String __2
    ) {
        Texticregexeq2 f = new Texticregexeq2();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.texticregexeq</code> as a field.
     */
    public static Field<Boolean> texticregexeq2(
          String __1
        , String __2
    ) {
        Texticregexeq2 f = new Texticregexeq2();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.texticregexeq</code> as a field.
     */
    public static Field<Boolean> texticregexeq2(
          Field<String> __1
        , Field<String> __2
    ) {
        Texticregexeq2 f = new Texticregexeq2();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.texticregexne</code>
     */
    public static Boolean texticregexne1(
          Configuration configuration
        , String __1
        , String __2
    ) {
        Texticregexne1 f = new Texticregexne1();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.texticregexne</code> as a field.
     */
    public static Field<Boolean> texticregexne1(
          String __1
        , String __2
    ) {
        Texticregexne1 f = new Texticregexne1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.texticregexne</code> as a field.
     */
    public static Field<Boolean> texticregexne1(
          Field<String> __1
        , Field<String> __2
    ) {
        Texticregexne1 f = new Texticregexne1();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.texticregexne</code>
     */
    public static Boolean texticregexne2(
          Configuration configuration
        , String __1
        , String __2
    ) {
        Texticregexne2 f = new Texticregexne2();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.texticregexne</code> as a field.
     */
    public static Field<Boolean> texticregexne2(
          String __1
        , String __2
    ) {
        Texticregexne2 f = new Texticregexne2();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public.texticregexne</code> as a field.
     */
    public static Field<Boolean> texticregexne2(
          Field<String> __1
        , Field<String> __2
    ) {
        Texticregexne2 f = new Texticregexne2();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.translate</code>
     */
    public static String translate(
          Configuration configuration
        , String __1
        , String __2
        , String __3
    ) {
        Translate f = new Translate();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.translate</code> as a field.
     */
    public static Field<String> translate(
          String __1
        , String __2
        , String __3
    ) {
        Translate f = new Translate();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Get <code>public.translate</code> as a field.
     */
    public static Field<String> translate(
          Field<String> __1
        , Field<String> __2
        , Field<String> __3
    ) {
        Translate f = new Translate();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);

        return f.asField();
    }

    /**
     * Call <code>public.regexp_matches</code>.
     */
    public static Result<RegexpMatchesRecord> regexpMatches(
          Configuration configuration
        , String __1
        , String __2
    ) {
        return configuration.dsl().selectFrom(com.jooq.coversionIssue.jooq.codegen.tables.RegexpMatches.REGEXP_MATCHES.call(
              __1
            , __2
        )).fetch();
    }

    /**
     * Get <code>public.regexp_matches</code> as a table.
     */
    public static RegexpMatches regexpMatches(
          String __1
        , String __2
    ) {
        return com.jooq.coversionIssue.jooq.codegen.tables.RegexpMatches.REGEXP_MATCHES.call(
            __1,
            __2
        );
    }

    /**
     * Get <code>public.regexp_matches</code> as a table.
     */
    public static RegexpMatches regexpMatches(
          Field<String> __1
        , Field<String> __2
    ) {
        return com.jooq.coversionIssue.jooq.codegen.tables.RegexpMatches.REGEXP_MATCHES.call(
            __1,
            __2
        );
    }

    /**
     * Call <code>public.regexp_split_to_table</code>.
     */
    public static Result<RegexpSplitToTableRecord> regexpSplitToTable(
          Configuration configuration
        , String __1
        , String __2
    ) {
        return configuration.dsl().selectFrom(com.jooq.coversionIssue.jooq.codegen.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
              __1
            , __2
        )).fetch();
    }

    /**
     * Get <code>public.regexp_split_to_table</code> as a table.
     */
    public static RegexpSplitToTable regexpSplitToTable(
          String __1
        , String __2
    ) {
        return com.jooq.coversionIssue.jooq.codegen.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
            __1,
            __2
        );
    }

    /**
     * Get <code>public.regexp_split_to_table</code> as a table.
     */
    public static RegexpSplitToTable regexpSplitToTable(
          Field<String> __1
        , Field<String> __2
    ) {
        return com.jooq.coversionIssue.jooq.codegen.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
            __1,
            __2
        );
    }
}
